vocabulary V{
    type index
    type patternID
    type value
   
    seq(patternID,index,value)
    
    // output predicate
    output(patternID)
       
    // sat per constraint
    len_constraint(patternID)
    cost_constraint(patternID)
    if_then_constraint(patternID)

    	max_len: index

	max_cost: int
	cost(value): int

	if:value
	then:value


    // len vocabulary
    
    //cost vocabulary
    
    //if-then-vocabulary
}

theory T:V{
  // len constraint
 //   max_len = max_len.
//    {
//     len_constraint(patternID) <- seq(patternID, index, value) & ~ (?i,v: i > max_len & seq(patternID,i,v)).
//    }
    
 // cost constraint
    
//    {
//     cost_constraint(patternID) <- seq(patternID, index, value) & sum{i, v: seq(patternID,i,v) : cost(v)} < max_cost.
//    }
    
  // if-then
    
//    {
//        if_then_constraint(patternID) <- seq(patternID, index, value) & (!i: seq(patternID,i,if) => ?j: seq(patternID,j,then)).
//    }
    
//    {
//        output(patternID) <- len_constraint(patternID) & cost_constraint(patternID) & if_then_constraint(patternID).
//    }
    	{
	len_constraint(patternID) <- seq(patternID, index, value) & ~ (?i,v: i > max_len & seq(patternID,i,v)).
	}

	{
	cost_constraint(patternID) <- seq(patternID, index, value) & sum{i, v: seq(patternID,i,v) : cost(v)} < max_cost.
	}

	{
	if_then_constraint(patternID) <- seq(patternID, index, value) & (!i: seq(patternID,i,if) => ?j: seq(patternID,j,then)).
	}



    	{
	output(patternID) <- len_constraint(patternID) & cost_constraint(patternID) & if_then_constraint(patternID).
    
}


Structure S:V{
  seq = {
  (1,0,1);
(2,0,1);(2,1,2);
(3,0,1);(3,1,2);(3,2,3);
(4,0,1);(4,1,3);
(5,0,2);
(6,0,2);(6,1,3);
(7,0,3);
    }

    	max_len = 4

	max_cost = 10
	cost = {1->2;2->5;3->4}

	if=2
	then=3


    // max len constraint   
    //max_len = 3

    // cost constraint
    //max_cost = 5
    //cost = {0 -> 6; 1-> 0; 2-> 0; 3 -> 0; 4 -> 0; 5 -> 2; 6 -> 2; 7 -> 0 }

    // if-then
    //if = 3
    //then = 4
    
}


procedure main(){

printmodels(modelexpand(T,S))

}
