* Check MARKER_FOR_LOOKUP in the code, you use subprocess.Popen it is nice but slow and forces python to keep track of all outputs and errors, instead use ugly but fast os.system("....") and dump the output in a file using pipes like:
./exec/prefixspan_linux_64 -min_sup 4090 /home/sergey/git/MAI-Thesis/data/prefixSpan/fifa.dat > tmp/seq_out
then you can just go ahead and read tmp/seq_out

* Do not hardcode paths, like to IDP, you can put a requirment for IDP to be installed though, we can try to fix it later

* Try this instead of prefixSpan:
http://sites.uclouvain.be/cp4dm/spm/

* for sequences Maximal IDP program is wrong: it simply uses old code

* check the conflict in utils

*  The Class Sequence: 54 self.sequence.append(list(s)) # WHY?

* rename data folders consistently: eclat --> itemsets, prefixSpan --> sequences, gspan --> graphs

* try to generate idp scripts in advance and run it in bash

tyr this:
make a test idp program --> pick one from IDP/ and multiply like 1000 --> 10000
write a simple bash script to run it on each of those 
for f in path/*
do
idp $f > out/$f
done
measure time

and the same from python use os.system(...) and compare to popen(...)


* Make up-to-date examples how to run the code  
* Explanation what is supported in the configurations
* How does cost constraint can be passed?
* Can you characterize the bottle neck, what actually takes so long? Profile or measure
* How and where we improve the code? # Discussion point


